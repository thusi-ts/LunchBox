// <auto-generated />
using System;
using LunchBox.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LunchBox.Shared.Migrations
{
    [DbContext(typeof(LbDbContext))]
    [Migration("20240118181525_AddingIdentity")]
    partial class AddingIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LunchBox.Shared.CartTemp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("TempCarts");
                });

            modelBuilder.Entity("LunchBox.Shared.CartTempExtraItem", b =>
                {
                    b.Property<int>("TempCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TempCartId"));

                    b.Property<int?>("CartTempId")
                        .HasColumnType("int");

                    b.Property<int>("ProductExtraItemId")
                        .HasColumnType("int");

                    b.Property<string>("ProductExtraItemName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ProductExtraItemValue")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("TempCartId");

                    b.HasIndex("CartTempId");

                    b.HasIndex("ProductExtraItemId");

                    b.ToTable("TempCartExtraItems");
                });

            modelBuilder.Entity("LunchBox.Shared.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("ActiveOffMes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvr")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Location name");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Map")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = 1,
                            ActiveOffMes = "",
                            City = "Viborg",
                            ContactPersonEmail = "email",
                            ContactPersonName = "name",
                            CreatedTime = new DateTime(2024, 1, 18, 19, 15, 25, 716, DateTimeKind.Local).AddTicks(1111),
                            Cvr = "12133",
                            Description = "description",
                            Email = "email",
                            LocationName = "Midtbyen gymnasium",
                            Phone = "23465656",
                            Street = "",
                            ZipCode = "code"
                        });
                });

            modelBuilder.Entity("LunchBox.Shared.LocationsDelivery", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OrderClosingTime")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LocationId", "StoreId");

                    b.HasIndex("StoreId");

                    b.ToTable("LocationsDeliverys");
                });

            modelBuilder.Entity("LunchBox.Shared.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequiredTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserOrderNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserOrderNumberName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LunchBox.Shared.OrderExtraItem", b =>
                {
                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("ProductExtraitemId")
                        .HasColumnType("int");

                    b.Property<string>("ProductExtraitemName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ProductExtraitemPrice")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ProductExtraitemValue")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderExtraItems");
                });

            modelBuilder.Entity("LunchBox.Shared.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("ActiveOffMes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Picture")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem10Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem1Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem2Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem3Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem4Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem5Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem6Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem7Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem8Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitem9Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory1")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory10")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory2")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory3")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory4")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory5")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory6")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory7")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory8")
                        .HasColumnType("int");

                    b.Property<int?>("ProductExtraitemMandatory9")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductExtraitem10Id");

                    b.HasIndex("ProductExtraitem1Id");

                    b.HasIndex("ProductExtraitem2Id");

                    b.HasIndex("ProductExtraitem3Id");

                    b.HasIndex("ProductExtraitem4Id");

                    b.HasIndex("ProductExtraitem5Id");

                    b.HasIndex("ProductExtraitem6Id");

                    b.HasIndex("ProductExtraitem7Id");

                    b.HasIndex("ProductExtraitem8Id");

                    b.HasIndex("ProductExtraitem9Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "kylling & Bacon"
                        },
                        new
                        {
                            Id = 2,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "kylling & Annanas"
                        },
                        new
                        {
                            Id = 3,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Kylling & Jalepenos"
                        },
                        new
                        {
                            Id = 4,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Kylling"
                        },
                        new
                        {
                            Id = 5,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Skinke & Ost"
                        },
                        new
                        {
                            Id = 6,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Æg & Rejer"
                        },
                        new
                        {
                            Id = 7,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Tunsalat"
                        },
                        new
                        {
                            Id = 8,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Koldrøget Laks"
                        },
                        new
                        {
                            Id = 9,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Oksestrimler"
                        },
                        new
                        {
                            Id = 10,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Pulled Pork"
                        },
                        new
                        {
                            Id = 11,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Lufttørret Skinke"
                        },
                        new
                        {
                            Id = 12,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Vegatar Falafel"
                        },
                        new
                        {
                            Id = 13,
                            Active = 0,
                            Discount = 0m,
                            Price = 32.00m,
                            ProductCategoryId = 1,
                            ProductExtraitem1Id = 1,
                            ProductExtraitem2Id = 2,
                            ProductExtraitem3Id = 3,
                            ProductExtraitem4Id = 4,
                            ProductExtraitemMandatory1 = 1,
                            ProductExtraitemMandatory2 = 1,
                            ProductName = "Mexikansk krydret oksekød"
                        });
                });

            modelBuilder.Entity("LunchBox.Shared.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageFolder")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Sandwich"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Salat"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Drikkevarer"
                        });
                });

            modelBuilder.Entity("LunchBox.Shared.ProductExtraItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemName1")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName10")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName11")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName12")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName13")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName14")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName15")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName16")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName17")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName18")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName19")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName20")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName3")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName4")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName5")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName6")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName7")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName8")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ItemName9")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("ItemPrice1")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice10")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice11")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice12")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice13")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice14")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice15")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice16")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice17")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice18")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice19")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice2")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice20")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice3")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice4")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice5")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice6")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice7")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice8")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("ItemPrice9")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductExtraItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemName1 = "Lys",
                            ItemPrice1 = 0m,
                            ItemPrice10 = 0m,
                            ItemPrice11 = 0m,
                            ItemPrice12 = 0m,
                            ItemPrice13 = 0m,
                            ItemPrice14 = 0m,
                            ItemPrice15 = 0m,
                            ItemPrice16 = 0m,
                            ItemPrice17 = 0m,
                            ItemPrice18 = 0m,
                            ItemPrice19 = 0m,
                            ItemPrice2 = 0m,
                            ItemPrice20 = 0m,
                            ItemPrice3 = 0m,
                            ItemPrice4 = 0m,
                            ItemPrice5 = 0m,
                            ItemPrice6 = 0m,
                            ItemPrice7 = 0m,
                            ItemPrice8 = 0m,
                            ItemPrice9 = 0m,
                            MachineName = "bread",
                            Name = "Brød"
                        },
                        new
                        {
                            Id = 2,
                            ItemName1 = "Karry",
                            ItemName10 = "Ingen dressing",
                            ItemName2 = "Creme fraiche",
                            ItemName3 = "Chili",
                            ItemName4 = "Hvidløg",
                            ItemName5 = "Thousand Island",
                            ItemName6 = "Mexikansk",
                            ItemName7 = "Grøn pesto",
                            ItemName8 = "BBQ sauce",
                            ItemName9 = "Senneps dild",
                            ItemPrice1 = 0m,
                            ItemPrice10 = 0m,
                            ItemPrice11 = 0m,
                            ItemPrice12 = 0m,
                            ItemPrice13 = 0m,
                            ItemPrice14 = 0m,
                            ItemPrice15 = 0m,
                            ItemPrice16 = 0m,
                            ItemPrice17 = 0m,
                            ItemPrice18 = 0m,
                            ItemPrice19 = 0m,
                            ItemPrice2 = 0m,
                            ItemPrice20 = 0m,
                            ItemPrice3 = 0m,
                            ItemPrice4 = 0m,
                            ItemPrice5 = 0m,
                            ItemPrice6 = 0m,
                            ItemPrice7 = 0m,
                            ItemPrice8 = 0m,
                            ItemPrice9 = 0m,
                            MachineName = "saurce",
                            Name = "Dressing"
                        },
                        new
                        {
                            Id = 3,
                            ItemName1 = "Ananas",
                            ItemName10 = "Cheddar ost",
                            ItemName2 = "Bacon",
                            ItemName3 = "Jalapenios",
                            ItemName4 = "Kylling",
                            ItemName5 = "Ost",
                            ItemName6 = "Rejer",
                            ItemName7 = "Rødløg",
                            ItemName8 = "Tun",
                            ItemName9 = "Tzatziki",
                            ItemPrice1 = 5.00m,
                            ItemPrice10 = 5.00m,
                            ItemPrice11 = 0m,
                            ItemPrice12 = 0m,
                            ItemPrice13 = 0m,
                            ItemPrice14 = 0m,
                            ItemPrice15 = 0m,
                            ItemPrice16 = 0m,
                            ItemPrice17 = 0m,
                            ItemPrice18 = 0m,
                            ItemPrice19 = 0m,
                            ItemPrice2 = 5.00m,
                            ItemPrice20 = 0m,
                            ItemPrice3 = 5.00m,
                            ItemPrice4 = 5.00m,
                            ItemPrice5 = 5.00m,
                            ItemPrice6 = 5.00m,
                            ItemPrice7 = 5.00m,
                            ItemPrice8 = 5.00m,
                            ItemPrice9 = 5.00m,
                            MachineName = "pep",
                            Name = "Ekstra fyld"
                        },
                        new
                        {
                            Id = 4,
                            ItemName1 = "Dåsesodavand",
                            ItemPrice1 = 10.00m,
                            ItemPrice10 = 0m,
                            ItemPrice11 = 0m,
                            ItemPrice12 = 0m,
                            ItemPrice13 = 0m,
                            ItemPrice14 = 0m,
                            ItemPrice15 = 0m,
                            ItemPrice16 = 0m,
                            ItemPrice17 = 0m,
                            ItemPrice18 = 0m,
                            ItemPrice19 = 0m,
                            ItemPrice2 = 0m,
                            ItemPrice20 = 0m,
                            ItemPrice3 = 0m,
                            ItemPrice4 = 0m,
                            ItemPrice5 = 0m,
                            ItemPrice6 = 0m,
                            ItemPrice7 = 0m,
                            ItemPrice8 = 0m,
                            ItemPrice9 = 0m,
                            MachineName = "menu_drinks",
                            Name = "Menutilbud"
                        });
                });

            modelBuilder.Entity("LunchBox.Shared.ProductStoreLocation", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("StoreId", "LocationId", "ProductId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStoreLocations");
                });

            modelBuilder.Entity("LunchBox.Shared.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ActiveOffMes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ChainId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("DeliveryOption")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenFre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenMan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenSat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenSun")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenThu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenTue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenWed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Pickup")
                        .HasColumnType("bit");

                    b.Property<string>("PickupTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("LunchBox.Shared.StoresPaymentDetail", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("AccountPrivateKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Currency")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentWindowApiKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("StoreId");

                    b.ToTable("StoresPaymentDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LunchBox.Shared.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EnteredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Full Name");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Newsletter")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryStoreIds")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Token")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("LocationId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("LunchBox.Shared.CartTemp", b =>
                {
                    b.HasOne("LunchBox.Shared.Product", "Product")
                        .WithMany("TempCarts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("TempCarts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LunchBox.Shared.CartTempExtraItem", b =>
                {
                    b.HasOne("LunchBox.Shared.CartTemp", null)
                        .WithMany("TempCartExtraItems")
                        .HasForeignKey("CartTempId");

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem")
                        .WithMany("TempCartExtraItems")
                        .HasForeignKey("ProductExtraItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductExtraItem");
                });

            modelBuilder.Entity("LunchBox.Shared.LocationsDelivery", b =>
                {
                    b.HasOne("LunchBox.Shared.Location", "Location")
                        .WithMany("LocationsDeliverys")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("LocationsDeliverys")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LunchBox.Shared.Order", b =>
                {
                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.User", "IdentityUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("IdentityUser");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LunchBox.Shared.OrderExtraItem", b =>
                {
                    b.HasOne("LunchBox.Shared.Order", "Order")
                        .WithMany("OrderExtraItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.Product", "Product")
                        .WithMany("OrderExtraItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem")
                        .WithMany("OrderExtraItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductExtraItem");
                });

            modelBuilder.Entity("LunchBox.Shared.Product", b =>
                {
                    b.HasOne("LunchBox.Shared.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem10")
                        .WithMany("Products10")
                        .HasForeignKey("ProductExtraitem10Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem1")
                        .WithMany("Products1")
                        .HasForeignKey("ProductExtraitem1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem2")
                        .WithMany("Products9")
                        .HasForeignKey("ProductExtraitem2Id");

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem3")
                        .WithMany("Products2")
                        .HasForeignKey("ProductExtraitem3Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem4")
                        .WithMany("Products3")
                        .HasForeignKey("ProductExtraitem4Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem5")
                        .WithMany("Products4")
                        .HasForeignKey("ProductExtraitem5Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem6")
                        .WithMany("Products5")
                        .HasForeignKey("ProductExtraitem6Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem7")
                        .WithMany("Products6")
                        .HasForeignKey("ProductExtraitem7Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem8")
                        .WithMany("Products7")
                        .HasForeignKey("ProductExtraitem8Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.ProductExtraItem", "ProductExtraItem9")
                        .WithMany("Products8")
                        .HasForeignKey("ProductExtraitem9Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductExtraItem1");

                    b.Navigation("ProductExtraItem10");

                    b.Navigation("ProductExtraItem2");

                    b.Navigation("ProductExtraItem3");

                    b.Navigation("ProductExtraItem4");

                    b.Navigation("ProductExtraItem5");

                    b.Navigation("ProductExtraItem6");

                    b.Navigation("ProductExtraItem7");

                    b.Navigation("ProductExtraItem8");

                    b.Navigation("ProductExtraItem9");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LunchBox.Shared.ProductExtraItem", b =>
                {
                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("ProductExtraItems")
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LunchBox.Shared.ProductStoreLocation", b =>
                {
                    b.HasOne("LunchBox.Shared.Location", "Location")
                        .WithMany("ProductStoreLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.Product", "Product")
                        .WithMany("ProductStoreLocations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("ProductStoreLocations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LunchBox.Shared.StoresPaymentDetail", b =>
                {
                    b.HasOne("LunchBox.Shared.Store", "Store")
                        .WithMany("StoresPaymentDetails")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LunchBox.Shared.User", b =>
                {
                    b.HasOne("LunchBox.Shared.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LunchBox.Shared.CartTemp", b =>
                {
                    b.Navigation("TempCartExtraItems");
                });

            modelBuilder.Entity("LunchBox.Shared.Location", b =>
                {
                    b.Navigation("LocationsDeliverys");

                    b.Navigation("ProductStoreLocations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LunchBox.Shared.Order", b =>
                {
                    b.Navigation("OrderExtraItems");
                });

            modelBuilder.Entity("LunchBox.Shared.Product", b =>
                {
                    b.Navigation("OrderExtraItems");

                    b.Navigation("ProductStoreLocations");

                    b.Navigation("TempCarts");
                });

            modelBuilder.Entity("LunchBox.Shared.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LunchBox.Shared.ProductExtraItem", b =>
                {
                    b.Navigation("OrderExtraItems");

                    b.Navigation("Products1");

                    b.Navigation("Products10");

                    b.Navigation("Products2");

                    b.Navigation("Products3");

                    b.Navigation("Products4");

                    b.Navigation("Products5");

                    b.Navigation("Products6");

                    b.Navigation("Products7");

                    b.Navigation("Products8");

                    b.Navigation("Products9");

                    b.Navigation("TempCartExtraItems");
                });

            modelBuilder.Entity("LunchBox.Shared.Store", b =>
                {
                    b.Navigation("LocationsDeliverys");

                    b.Navigation("Orders");

                    b.Navigation("ProductExtraItems");

                    b.Navigation("ProductStoreLocations");

                    b.Navigation("Products");

                    b.Navigation("StoresPaymentDetails");

                    b.Navigation("TempCarts");
                });

            modelBuilder.Entity("LunchBox.Shared.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
